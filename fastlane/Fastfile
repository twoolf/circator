# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.56.0"

default_platform :ios

project_dir = "MetabolicCompass.xcodeproj"
ipa_archive = "MetabolicCompass.ipa"

app_ids = { 'edu.jhu.cs.damsl.MetabolicCompass.app' =>
              ['Metabolic Compass', 'APP_UUID', '^MetabolicCompass$', 'MetabolicCompass/Info.plist'],

            'edu.jhu.cs.damsl.MetabolicCompass.kit' =>
              ['MC Core', 'KIT_UUID', 'MetabolicCompassKit', 'MetabolicCompassKit/Info.plist'],

            'edu.jhu.cs.damsl.MetabolicCompass.app.watch' =>
              ['MC Watch', 'WATCH_UUID', '^MetabolicCompassWatch$', 'MetabolicCompassWatch/Info.plist'],

            'edu.jhu.cs.damsl.MetabolicCompass.app.watch.extension' =>
              ['MC Watch Extension', 'WATCHEXT_UUID', 'MetabolicCompassWatchExtension', 'MetabolicCompassWatchExtension/Info.plist'],

            'edu.jhu.cs.damsl.MetabolicCompassTests' =>
              ['MC Tests', 'TESTS_UUID', '^MetabolicCompassTests$', 'MetabolicCompassTests/Info.plist'],

            'edu.jhu.cs.damsl.MetabolicCompassUITests' =>
              ['MC UI Tests', 'UITESTS_UUID', '^MetabolicCompassUITests$', 'MetabolicCompassUITests/Info.plist'] }

app_dist_identity = "iPhone Distribution: Yanif Ahmad (E4SL9A9Z96)"

app_dist_profiles = { 'edu.jhu.cs.damsl.MetabolicCompass.app' => "",
                      'edu.jhu.cs.damsl.MetabolicCompass.kit' => "",
                      'edu.jhu.cs.damsl.MetabolicCompass.app.watch' => "",
                      'edu.jhu.cs.damsl.MetabolicCompass.app.watch.extension' => ""
                    }

platform :ios do
  desc "Install FixCode for c&p management"
  lane :setupxcode do
    install_xcode_plugin(
      url: "https://github.com/fastlane/FixCode/releases/download/0.2.0/FixCode.xcplugin.zip"
    )
  end

  desc "Clean DerivedData"
  lane :cleanderived do
    clear_derived_data
  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  #######################################
  ## Development sessions
  ##
  desc "Install Blackbox for secure git files"
  lane :setupbb do
    sh "cd .. && ./../scripts/install_blackbox.sh"
  end

  desc "Start a Metabolic Compass development session"
  lane :start_coding do
    sh "cd .. && ./scripts/blackbox_edit_start_all.sh"
  end

  desc "Stop a Metabolic Compass development session"
  lane :stop_coding do
    sh "cd .. && ./scripts/blackbox_edit_stop_all.sh"
  end

  ########################################
  ## Bundle management
  ##

  desc "Rename the app, via its app identifier"
  lane :rename_app do
    app_ids.each {|appid, metadata|
      update_app_identifier(
        xcodeproj: 'MetabolicCompass.xcodeproj',
        app_identifier: appid,
        plist_path: metadata[3]
      )
    }
  end

  desc "Create bundle identifiers on the Developer Portal"
  lane :create_portal_appids do
    app_ids.each {|appid, metadata|
      produce(
        skip_itc: true,
        username: 'yanif.ahmad@gmail.com',
        app_identifier: appid,
        app_name: metadata[0],
        language: 'English',
        app_version: '1.0'
      )

      sh "produce enable_services --app-group --healthkit -u yanif.ahmad@gmail.com -a #{appid}"
    }
  end

  desc "Create bundle identifiers on iTunes Connect"
  lane :create_itc_appids do
    produce(
      skip_devcenter: true,
      username: 'yanif.ahmad@gmail.com',
      app_identifier: 'edu.jhu.cs.damsl.MetabolicCompass.app',
      app_name: 'Metabolic Compass',
      language: 'English',
      app_version: '1.0'
    )
  end

  #############################################
  ## Cert and provisioning profile management 
  ##

  desc "Fastlane/match execution"
  lane :certs do |options|
    type  = options.key?(:type) ? options[:type] : 'development'
    ro    = options.key?(:readonly) ? options[:readonly] : true
    frc   = options.key?(:force) ? options[:force] : false

    app_ids.each {|appid,_| match(type: type, force: frc, readonly: ro, app_identifier: appid) }
  end

  ##
  ## Certificate lane synonyms.

  desc "Get Ad Hoc distribution certs"
  lane :adhoc_certs do
    certs(type: 'adhoc')
  end

  desc "Get App Store distribution certs"
  lane :app_certs do
    certs(type: 'appstore')
  end

  desc "Force new development certificates"
  lane :new_dev_certs do
    certs(type: 'development', readonly: false, force: true)
  end

  desc "Force new adhoc certificates"
  lane :new_adhoc_certs do
    certs(type: 'adhoc', readonly: false, force: true)
  end

  desc "Force new app certificates"
  lane :new_app_certs do
    certs(type: 'appstore', readonly: false, force: true)
  end


  ################################
  ## Build
  ##

  desc "Set XCode project code signing and provisioning"
  lane :set_codesigning do
    app_ids.each {|appid, metadata|
      set_project_provisioning_env_var(xcodeproj: project_dir, env_var: metadata[1], target_filter: metadata[2])
    }
  end

  desc "Set a specific build number"
  lane :build_version do |options|
    increment_build_number(build_number: options[:build_number])
  end

  desc "Command line build preparation"
  lane :preparebuild do |options|
    type  = options.key?(:type) ? options[:type] : 'development'
    ro    = options.key?(:readonly) ? options[:readonly] : true
    force = options.key?(:force) ? options[:force] : false

    cocoapods
    certs(type: type, readonly: ro, force: force)
  end

  desc "Build a development archive"
  lane :build_dev do |options|
    if options[:pods]
      cocoapods
    end

    if options[:force_certs]
      new_dev_certs
    else
      certs
    end

    if options[:build_number]
      increment_build_number(build_number: options[:build_number])
    else
      increment_build_number
    end

    # Set UDID environment variables
    app_ids.each {|appid, metadata|
      set_project_provisioning_env_var(xcodeproj: project_dir, env_var: metadata[1], target_filter: metadata[2])
      uuid = ENV["sigh_#{appid}_development"]
      ENV[metadata[1]] = uuid
    }

    gym(scheme: "MetabolicCompass", use_legacy_build_api: true)
  end

  desc "Build an adhoc archive"
  lane :build_adhoc do |options|
    if options[:pods]
      cocoapods
    end

    if options[:force_certs]
      new_adhoc_certs
    else
      adhoc_certs
    end

    if options[:build_number]
      increment_build_number(build_number: options[:build_number])
    else
      increment_build_number
    end

    # Set UUID environment variables
    app_ids.each {|appid, metadata|
      set_project_provisioning_env_var(xcodeproj: project_dir, env_var: metadata[1], target_filter: metadata[2])
      uuid = ENV["sigh_#{appid}_adhoc"]
      ENV[metadata[1]] = uuid
    }

    gym(scheme: "MetabolicCompass", use_legacy_build_api: true)
  end

  desc "Build a release archive"
  lane :build_app do |options|
    if options[:pods]
      cocoapods
    end

    if options[:force_certs]
      new_app_certs
    else
      app_certs
    end

    if options[:build_number]
      increment_build_number(build_number: options[:build_number])
    else
      increment_build_number
    end

    # Set UUID environment variables
    app_ids.each {|appid, metadata|
      set_project_provisioning_env_var(xcodeproj: project_dir, env_var: metadata[1], target_filter: metadata[2])
      uuid = ENV["sigh_#{appid}_appstore"]
      ENV[metadata[1]] = uuid
    }

    gym(scheme: "MetabolicCompass", use_legacy_build_api: true)
  end

  desc "Resign a development archive"
  lane :resign_dev do
    new_dev_certs
    app_ids.each {|appid, metadata|
      uuid = ENV["sigh_#{appid}_development"]
      homedir = ENV["HOME"]
      app_dist_profiles[appid] = "#{homedir}/Library/MobileDevice/Provisioning Profiles/#{uuid}.mobileprovision"
    }

    resign(ipa: ipa_archive, signing_identity: app_dist_identity, provisioning_profile: app_dist_profiles)
  end

  desc "Resign a development archive"
  lane :resign_dev_as_dist do
    new_app_certs
    app_ids.each {|appid, metadata|
      uuid = ENV["sigh_#{appid}_appstore"]
      homedir = ENV["HOME"]
      app_dist_profiles[appid] = "#{homedir}/Library/MobileDevice/Provisioning Profiles/#{uuid}.mobileprovision"
    }

    resign(ipa: ipa_archive, signing_identity: app_dist_identity, provisioning_profile: app_dist_profiles)
  end


  ######################################
  ## Beta release
  ##

  desc "Upload a Beta Build to Apple TestFlight"
  lane :beta_upload_testflight do
    ENV["DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS"] = "-t DAV"

    pilot(skip_submission: true)
    post_to_slack(scheme: "MetabolicCompass", destination: "TestFlight")
  end

  desc "Upload a Beta Build to Fabric/Crashlytics"
  lane :beta_upload_fabric do
    crashlytics(ipa_path: "./MetabolicCompass.ipa")
    post_to_slack(scheme: "MetabolicCompass", destination: "Fabric")
  end

  desc "Build and submit a beta build to Apple TestFlight"
  lane :beta_testflight do |options|
    pods = options.key?(:pods) ? options[:pods] : false
    force_certs = options.key?(:force_certs) ? options[:force_certs] : false
    if options[:build_number]
        build_app(pods: pods, force_certs: force_certs, build_number: options[:build_number])
    else
        build_app(pods: pods, force_certs: force_certs)
    end
    beta_upload_testflight
  end

  desc "Build and submit a beta build to Fabric/Crashlytics"
  lane :beta_fabric do
    pods = options.key?(:pods) ? options[:pods] : false
    force_certs = options.key?(:force_certs) ? options[:force_certs] : false
    if options[:build_number]
        build_dev(pods: pods, force_certs: force_certs, build_number: options[:build_number])
    else
        build_dev(pods: pods, force_certs: force_certs)
    end
    beta_upload_fabric
  end

  desc "Build and submit a beta build to Apple TestFlight and Fabric/Crashlytics"
  lane :beta do
    build_dev
    beta_upload_fabric
    resign_dev_as_dist
    beta_upload_testflight
  end

  ############################################
  ## TODO: AppStore
  ##

  #desc "Deploy a new version to the App Store"
  #lane :appstore do
  #  prepbuild(type: "appstore", readonly: true)
  #  snapshot
  #  gym(scheme: "MetabolicCompass")
  #  deliver(force: true)
  #  frameit
  #end
  
  desc "Build and submit a beta build to Fabric/Crashlytics"
  lane :beta_srost_fabric do
    build_dev
    crashlytics(ipa_path: "./MetabolicCompass.ipa", notifications: true)
  end


  ###############################
  ## Utilities
  ##

  desc "Post a message to #circator-alerts on Slack"
  private_lane :post_to_slack do |options|
    scheme      = options[:scheme]
    version     = get_version_number(xcodeproj: project_dir)
    build       = get_build_number(xcodeproj: project_dir)
    environment = scheme.upcase
    destination = options[:destination]

    slack(
      message: "New :ios: *#{version}* (#{build}) running `#{environment}` has been submitted to *#{destination}*  :rocket:",
    )
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful
    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


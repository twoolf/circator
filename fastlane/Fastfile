# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.56.0"

default_platform :ios

project_dir = "Circator.xcodeproj"
app_ids = { 'edu.jhu.cs.damsl.Circator.app' =>
              ['Metabolic Compass', 'APP_UUID', '^Circator$', 'Circator/Info.plist'],

            'edu.jhu.cs.damsl.Circator.kit' =>
              ['MC Core', 'KIT_UUID', 'CircatorKit', 'CircatorKit/Info.plist'],

            'edu.jhu.cs.damsl.Circator.app.watch' =>
              ['MC Watch', 'WATCH_UUID', '^CircatorWatch$', 'CircatorWatch/Info.plist'],

            'edu.jhu.cs.damsl.Circator.app.watch.extension' =>
              ['MC Watch Extension', 'WATCHEXT_UUID', 'CircatorWatch Extension', 'CircatorWatch Extension/Info.plist'] }

platform :ios do
  before_all do
    # 
  end

  lane :testrb do
    app_ids.map {|n| puts "#{n}" }
  end

  desc "Install FixCode for c&p management"
  lane :setupxcode do
    install_xcode_plugin(
      url: "https://github.com/fastlane/FixCode/releases/download/0.2.0/FixCode.xcplugin.zip"
    )
  end

  desc "Install Blackbox for secure git files"
  lane :setupbb do
    sh "cd .. && ./../scripts/install_blackbox.sh"
  end

  desc "Clean DerivedData"
  lane :cleanderived do
    clear_derived_data
  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  #######################################
  ## Development sessions
  ##

  desc "Start a Circator development session"
  lane :start_coding do
    sh "cd .. && ./scripts/blackbox_edit_start_all.sh"
  end

  desc "Stop a Circator development session"
  lane :stop_coding do
    sh "cd .. && ./scripts/blackbox_edit_stop_all.sh"
  end

  ########################################
  ## Bundle management
  ##

  desc "Rename the app, via its app identifier"
  lane :rename_app do
    app_ids.each {|appid, metadata|
      update_app_identifier(
        xcodeproj: 'Circator.xcodeproj',
        app_identifier: appid,
        plist_path: metadata[3]
      )
    }
  end

  desc "Create bundle identifiers on the Developer Portal"
  lane :create_portal_appids do
    app_ids.each {|appid, metadata|
      produce(
        skip_itc: true,
        username: 'yanif.ahmad@gmail.com',
        app_identifier: appid,
        app_name: metadata[0],
        language: 'English',
        app_version: '1.0'
      )

      sh "produce enable_services --app-group --healthkit -u yanif.ahmad@gmail.com -a #{appid}"
    }
  end

  desc "Create bundle identifiers on iTunes Connect"
  lane :create_itc_appids do
    produce(
      skip_devcenter: true,
      username: 'yanif.ahmad@gmail.com',
      app_identifier: 'edu.jhu.cs.damsl.Circator.app',
      app_name: 'Metabolic Compass',
      language: 'English',
      app_version: '1.0'
    )
  end

  ########################################
  ## Cert and provisioning profile prep
  ##

  desc "Fastlane/match execution"
  private_lane :prepcerts do |options|
    type  = options[:type]
    ro    = options[:readonly]
    frc   = options[:force]

    app_ids.each {|appid,_| match(type: type, force: frc, readonly: ro, app_identifier: appid) }
  end

  desc "Force new development certificates"
  lane :new_dev_certs do
    prepcerts(type: 'development', readonly: false, force: true)
  end

  desc "Force new app certificates"
  lane :new_app_certs do
    prepcerts(type: 'appstore', readonly: false, force: true)
  end

  desc "Private lane for command line build preparation"
  private_lane :prepbuild do |options|
    type = options[:type]
    ro   = options[:readonly]

    cocoapods
    prepcerts(type: type, readonly: ro, force: false)
  end

  desc "Prepare for command line build"
  lane :preparebuild do
    prepbuild(type: 'development', readonly: true)
  end

  desc "Prepare for command line deployment to the App Store"
  lane :preparedeploy do
    prepcerts(type: 'appstore')
  end


  ################################
  ## Build
  ##

  desc "Build a development archive"
  lane :build_dev do
    prepbuild(type: 'development', readonly: true)
    increment_build_number

    # Set UDID environment variables
    app_ids.each {|appid, metadata|
      set_project_provisioning_env_var(xcodeproj: project_dir, env_var: metadata[1], target_filter: metadata[2])
      uuid = ENV["sigh_#{appid}_development"]
      ENV[metadata[1]] = uuid
    }

    #gym(scheme: "Circator")
  end

  desc "Build a release archive"
  lane :build_app do
    prepbuild(type: "appstore", readonly: true)
    increment_build_number

    # Set UUID environment variables
    app_ids.each {|appid, metadata|
      set_project_provisioning_env_var(xcodeproj: project_dir, env_var: metadata[1], target_filter: metadata[2])
      uuid = ENV["sigh_#{appid}_appstore"]
      ENV[metadata[1]] = uuid
    }

    gym(scheme: "Circator")
  end


  ######################################
  ## Beta release
  ##

  desc "Upload a Beta Build to Apple TestFlight"
  lane :beta_upload_testflight do
    ENV["DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS"] = "-t DAV"

    pilot(skip_submission: true)
    post_to_slack(scheme: "Circator", destination: "TestFlight")
  end

  desc "Upload a Beta Build to Fabric/Crashlytics"
  lane :beta_upload_fabric do
    crashlytics(ipa_path: "./Circator.ipa")
    post_to_slack(scheme: "Circator", destination: "Fabric")
  end

  desc "Build and submit a development build to Apple TestFlight"
  lane :beta_testflight do
    build_dev
    beta_upload_testflight
  end

  desc "Build and submit a distribution build to Apple TestFlight"
  lane :beta_app_testflight do
    build_app
    beta_upload_testflight
  end

  desc "Build and submit a development build to Fabric/Crashlytics"
  lane :beta_fabric do
    build_dev
    beta_upload_fabric
  end

  desc "Build and submit a development build to Apple TestFlight and Fabric/Crashlytics"
  lane :beta do
    build_dev
    beta_upload_testflight
    beta_upload_fabric
  end

  ############################################
  ## TODO: AppStore
  ##

  #desc "Deploy a new version to the App Store"
  #lane :appstore do
  #  prepbuild(type: "appstore", readonly: true)
  #  snapshot
  #  gym(scheme: "Circator")
  #  deliver(force: true)
  #  frameit
  #end


  ###############################
  ## Utilities
  ##

  desc "Post a message to #circator-alerts on Slack"
  private_lane :post_to_slack do |options|
    scheme      = options[:scheme]
    version     = get_version_number(xcodeproj: project_dir)
    build       = get_build_number(xcodeproj: project_dir)
    environment = scheme.upcase
    destination = options[:destination]

    slack(
      message: "New :ios: *#{version}* (#{build}) running `#{environment}` has been submitted to *#{destination}*  :rocket:",
    )
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful
    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


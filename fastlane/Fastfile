# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.56.0"

default_platform :ios

platform :ios do
  before_all do
    # 
  end

  desc "Install FixCode for c&p management"
  lane :setupxcode do
    install_xcode_plugin(
      url: "https://github.com/fastlane/FixCode/releases/download/0.2.0/FixCode.xcplugin.zip"
    )
  end

  desc "Install Blackbox for secure git files"
  lane :setupbb do
    sh "scripts/install_blackbox.sh"
  end

  desc "Clean DerivedData"
  lane :cleanderived do
    clear_derived_data
  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  #######################################
  ## Development sessions
  ##

  desc "Start a Circator development session"
  lane :start_coding do
    sh "scripts/blackbox_edit_start_all.sh"
  end

  desc "Stop a Circator development session"
  lane :stop_coding do
    sh "scripts/blackbox_edit_stop_all.sh"
  end

  ########################################
  ## Cert and provisioning profile prep
  ## 

  desc "Fastlane/match execution"
  private_lane :circatormatches do |options|
    type  = options[:type]
    ro    = options[:readonly]
    frc   = options[:force]

    match(type: type, force: frc, readonly: ro, app_identifier: "edu.jhu.cs.damsl.Circator.dev8")
    match(type: type, force: frc, readonly: ro, app_identifier: "edu.jhu.cs.damsl.CircatorKit")
    match(type: type, force: frc, readonly: ro, app_identifier: "edu.jhu.cs.damsl.Circator.dev8.watchkitapp2")
    match(type: type, force: frc, readonly: ro, app_identifier: "edu.jhu.cs.damsl.Circator.dev8.watchkitapp2.watchextension")
  end

  desc "Private lane for command line build preparation"
  private_lane :prepbuild do |options|
    type = options[:type]
    ro   = options[:readonly]

    cocoapods
    circatormatches(type: type, readonly: ro, force: false)
  end

  desc "Ensure all devices are added to the provisioning profile"
  lane :newdevices do
    circatormatches(type: 'development', readonly: false, force: true)
  end

  desc "Prepare for command line build"
  lane :preparebuild do
    prepbuild(type: 'development', readonly: true)
  end

  desc "Prepare for command line deployment to the App Store"
  lane :preparedeploy do
    circatormatches(type: 'appstore')
  end


  ################################
  ## Build
  ##

  desc "Build locally from the command line"
  lane :build do
    prepbuild(type: 'development', readonly: true)
    gym(scheme: "Circator")
  end


  ######################################
  ## Beta release
  ##

  desc "Build a new Beta release"
  lane :beta_build do
    prepbuild(type: "appstore", readonly: true)
    increment_build_number
    gym(scheme: "Circator")
  end

  desc "Upload a Beta Build to Apple TestFlight"
  lane :beta_upload_testflight do
    ENV["DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS"] = "-t DAV"

    pilot(skip_submission: true)
    post_to_slack(scheme: "Circator", destination: "TestFlight")
  end

  desc "Upload a Beta Build to Fabric/Crashlytics"
  lane :beta_upload_fabric do
    crashlytics(ipa_path: "./Circator.ipa")
    post_to_slack(scheme: "Circator", destination: "Fabric")
  end

  desc "Build and submit a new Beta Build to Apple TestFlight"
  lane :beta_testflight do
    beta_build
    beta_upload_testflight
  end

  desc "Build and submit a new Beta Build to Fabric/Crashlytics"
  lane :beta_fabric do
    beta_build
    beta_upload_fabric
  end

  desc "Build and submit a new Beta Build to Apple TestFlight and Fabric/Crashlytics"
  lane :beta do
    beta_build
    beta_upload_testflight
    beta_upload_fabric
  end

  ############################################
  ## TODO: AppStore
  ##

  #desc "Deploy a new version to the App Store"
  #lane :appstore do
  #  prepbuild(type: "appstore", readonly: true)
  #  snapshot
  #  gym(scheme: "Circator")
  #  deliver(force: true)
  #  frameit
  #end


  ###############################
  ## Utilities
  ##

  desc "Post a message to #circator-alerts on Slack"
  private_lane :post_to_slack do |options|
    scheme      = options[:scheme]
    version     = get_version_number(xcodeproj: "Circator.xcodeproj")
    build       = get_build_number(xcodeproj: "Circator.xcodeproj")
    environment = scheme.upcase
    destination = options[:destination]

    slack(
      message: "New :ios: *#{version}* (#{build}) running `#{environment}` has been submitted to *#{destination}*  :rocket:",
    )
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful
    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

